{"name":"Openmini","tagline":"An open source, Minimoog-like digital synthesizer","body":"OpenMini - Open homage to Minimoog\r\n==================================\r\n\r\nOpenMini is a modern C++ implementation of a Minimoog-like digital synthesizer.\r\nIt aims at showing a simple, cross-platform yet efficient implementation of state of the art low-aliasing audio synthesis algorithms.\r\n\r\nAs its main goal is education, information sharing and (hopefully) inspiring other people to hack and spread audio synthesis tools and art, it is licensed under GPLv3 license.\r\nIt basically means that every one can use, copy and modify it with the sole condition that the source code must be made public.\r\n\r\nOrganization\r\n------------\r\n\r\nOpenMini is organized in third parts as follows:\r\n- A \"generators\" part, offering numerous signal generators for various forms (sin, square, triangle...) each one implemented using differents algorithms (DPW, BLIT-derived methods...)\r\nA lot of these algorithms theory comes from Institute for the 'Digital Sound Generation' online book, published by the Computer Music and Sound Technology. The implementation itself is first prototyped in Python - scripts are made public in OpenMini, under the same license.\r\n- A \"synthesizer\" part, which is the actual synthesizer boilerplate - managing synthesis algorithms parameterization, user input and so on.\r\n- An \"implementation\" part, relying heavily on the open source [JUCE framework](http://www.juce.com/), wraps the latter synthesizer into an actual audio plugin that can easily be used in various audio editor. For now only VST is available, RTAS should follow. Lastly, a standalone version is available using the same code as the plugin but without any dependencies to the proprietary Steinberg's VST SDK.\r\n\r\nAll of this code is heavily tested using the Google Test Framework.\r\nIt is documented following Doxygen convention, and strictly follows Google style - cpplint script is included for this purpose.\r\nAll the code is standard C++: no OS-specific headers.\r\n\r\nNote that OpenMini is under continuous integration, building under Linux (using gcc and Clang) at each push with [Travis CI](https://travis-ci.org/G4m4/openmini).\r\nThe Windows build is continuously tested as well.\r\n\r\nBuilding OpenMini library\r\n-------------------------\r\n\r\nOpenMini build system is Cmake.\r\n\r\nIts most basic use would be, from the root directory openmini/ :\r\n\r\n    mkdir build && cd build\r\n    cmake ..\r\n    cmake --build .\r\n\r\nThis only build the library - nothing else. You can also build OpenMini tests and implementations as explained below.\r\n\r\nBuilding OpenMini tests\r\n-----------------------\r\n\r\nTests are using the [Google Test Framework](http://code.google.com/p/googletest/).\r\nTo build the test, set the environment variable GTEST_ROOT to the directory where you put the GTest sources.\r\nOn Linux, this can be done as follows:\r\n\r\n    sudo apt-get install libgtest-dev\r\n    export GTEST_ROOT=/usr/src/gtest\r\n\r\nOn Windows, this is done by going to Control Panel->System->Advanced system settings->Environment variables.\r\n\r\nOnce this is done, you only have to set the flag OPENMINI_HAS_GTEST to ON (caps matters) when invoking cmake:\r\n\r\n    cmake -DOPENMINI_HAS_GTEST=ON ../\r\n\r\nBuilding OpenMini implementations\r\n---------------------------------\r\n\r\n\"Implementation\" means here the plugins as well as a standalone version of OpenMini.\r\nBoth are made using the [JUCE framework](https://github.com/julianstorer/JUCE).\r\nTo build the implementations, set the environment variable JUCE_ROOT to the directory where you put the JUCE sources.\r\nOn Linux, this can be done as follows~:\r\n\r\n    cd ~/\r\n    mkdir juce\r\n    cd juce\r\n    git clone --depth 1 git://github.com/julianstorer/JUCE.git\r\n    export JUCE_ROOT=~/juce/\r\n\r\nJUCE requires a few additional dependencies:\r\n\r\n    sudo apt-get -y install libfreetype6-dev\r\n    sudo apt-get -y install libx11-dev\r\n    sudo apt-get -y install libxinerama-dev\r\n    sudo apt-get -y install libxcursor-dev\r\n    sudo apt-get -y install mesa-common-dev\r\n    sudo apt-get -y install libasound2-dev\r\n    sudo apt-get -y install freeglut3-dev\r\n    sudo apt-get -y install libxcomposite-dev\r\n\r\nLastly, if you wish to build the VST plugin, you will have to get the (proprietary) [Steinberg VST SDK](http://www.steinberg.net/en/company/developer.html) and set the environment variable VST_ROOT to its location.\r\n\r\nOnce all of this is done, you only have to set the flag OPENMINI_HAS_JUCE to ON (caps matters) when invoking cmake:\r\n\r\n    cmake -DOPENMINI_HAS_JUCE=ON ../\r\n\r\nNote that both these flags can be used simultaneously.\r\n\r\nLicense\r\n==================================\r\nOpenMini is under GPLv3.\r\n\r\nSee the COPYING file for the full license text.\r\n","google":"UA-45544733-1","note":"Don't delete this file! It's used internally to help with page regeneration."}