/// @filename WidgetsManager.cpp
/// @brief OpenMini widgets manager
/// @author gm
/// @copyright gm 2013
///
/// This file is part of OpenMini
///
/// OpenMini is free software: you can redistribute it and/or modify
/// it under the terms of the GNU General Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
///
/// OpenMini is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
///
/// You should have received a copy of the GNU General Public License
/// along with OpenMini.  If not, see <http://www.gnu.org/licenses/>.


// This file is NOT generated by Juce (at least not after the first time),
// That's why we apply our coding style here

#include "openmini/implementation/common/WidgetsManager.h"

#include "openmini/implementation/common/PluginEditor.h"

WidgetsManager::WidgetsManager(
    const std::array<ParameterMeta, Parameters::kCount>& params) {
  // TODO(gm): try to move this into the constructor initializer list
  for (unsigned int param_id(0);
       param_id < params.size();
       ++param_id) {
    // Remember, the OpenMini parameter manager manages its id with:
    // - ids beginning at 0
    // - adjacent ids
    // hence the id matching a widget is its index in the array
    Widget* widget(new Widget(params[param_id]));
    addAndMakeVisible(widget);
    widget->setRange(0.0, 1.0);
    widget->addListener(this);
    widgets_.add(widget);
  }
}

WidgetsManager::~WidgetsManager() {
  getEditor().removeChangeListener(this);
}

void WidgetsManager::paint(juce::Graphics& g) {
  int current_x(0);
  int current_y(0);
  for (int param_id(0);
       param_id < widgets_.size();
       ++param_id) {
    Widget* widget(widgets_[param_id]);
    widget->setBounds(current_x, current_y, kWidgetWidth, kWidgetHeight);
    current_y += kWidgetHeight;
    current_y += kWidgetMargin;
    if (current_y > kColumnHeight) {
      current_x += kColumnWidth;
      current_y = 0;
    }
  }
}

void WidgetsManager::sliderValueChanged(juce::Slider* slider) {
  const float value(static_cast<float>(slider->getValue()));
  getEditor().ParamValueChanged(getParamId(slider), value);
}

void WidgetsManager::sliderDragStarted(juce::Slider* slider) {
  getEditor().ParamGestureBegan(getParamId(slider));
}

void WidgetsManager::sliderDragEnded(juce::Slider* slider) {
  getEditor().ParamGestureEnded(getParamId(slider));
}

void WidgetsManager::changeListenerCallback(
    juce::ChangeBroadcaster *source) {
  // No other change broacaster than the processor for now!
  OPENMINI_ASSERT(&(getEditor()) == source);
  // Update UI components without sending back
  // notifications to the processor
  for (int param_id(0);
       param_id < widgets_.size();
       ++param_id) {
    Widget* widget = widgets_[param_id];
    widget->setValue(getEditor().GetParamValue(param_id),
                     juce::dontSendNotification);
  }
}

int WidgetsManager::getParamId(const juce::Slider* slider) const {
  // TODO(gm): this cast should not even occur - we should have a Widget* here.
  const Widget* widget(dynamic_cast<const Widget*>(slider));
  OPENMINI_ASSERT(widget != nullptr);
  const int param_id(widgets_.indexOf(widget));
  OPENMINI_ASSERT(param_id >= 0);
  return param_id;
}

OpenMiniAudioProcessorEditor& WidgetsManager::getEditor(void) const {
  // Will throw if the downcast fails
  return dynamic_cast<OpenMiniAudioProcessorEditor&>(
    *(this->getParentComponent()));
}
